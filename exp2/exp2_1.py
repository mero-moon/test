# 欧几里得算法求两个数字的最大公约数
def gcd(a,b):
    if b == 0:
        return a
    else:
        return gcd(b,a%b)

# 拓展欧几里得算法
def ext_gcd(a,b):
    if b == 0:
        x1 = 1
        y1 = 0
        x = x1
        y = y1
        r = a
        return r,x,y
    else:
        r,x1,y1 = ext_gcd(b,a%b)
        x = y1
        y = x1 - (a // b) * y1
        return r,x,y

# 使用快速幂取模计算法进行加密解密
def power(a, b, c):
    s=1
    a %= c
    while b != 0:
        if b % 2 == 1:
            s = (s * a) % c
        b = b // 2
        a = (a * a) % c
    return s

# 生成公匙私匙， p、q为两个超大质数
def gen_key(p, q):
    n = p * q
    fn = (p-1) * (q-1)
    e = 3889
    a = e
    b = fn
    r, x, y = ext_gcd(a, b)
    print("选取的公匙为： \n", e)
    print("生成的私匙为： \n", x)
    d = x
    return (n, e), (n, d)

# 加密 m是信息 c是生成的密文
def encrypt(m, pubkey):
    n = pubkey[0]
    e = pubkey[1]
    c = power(m, e, n)
    return c

# 解密 c是密文， m是解密后的明文
def decrypt(c, selfkey):
    n = selfkey[0]
    d = selfkey[1]
    m = power(c, d, n)
    return m

if __name__ == "__main__":
    p = 106697219132480173106064317148705638676529121742557567770857687729397446898790451577487723991083173010242416863238099716044775658681981821407922722052778958942891831033512463262741053961681512908218003840408526915629689432111480588966800949428079015682624591636010678691927285321708935076221951173426894836169
    q = 144819424465842307806353672547344125290716753535239658417883828941232509622838692761917211806963011168822281666033695157426515864265527046213326145174398018859056439431422867957079149967592078894410082695714160599647180947207504108618794637872261572262805565517756922288320779308895819726074229154002310375209
    pub_key, self_key = gen_key(p, q)
    m = 1356205320457610288745198967657644166379972189839804389074591563666634066646564410685955217825048626066190866536592405966964024022236587593447122392540038493893121248948780525117822889230574978651418075403357439692743398250207060920929117606033490559159560987768768324823011579283223392964454439904542675637683985296529882973798752471233683249209762843835985174607047556306705224118165162905676610067022517682197138138621344578050034245933990790845007906416093198845798901781830868021761765904777531676765131379495584915533823288125255520904108500256867069512326595285549579378834222350197662163243932424184772115345
    print("明文为： \n", m)
    c = encrypt(m, pub_key)
    print("加密后的密文为： \n", c)
    d = decrypt(c, self_key)
    print("解密后的明文为： \n", d)